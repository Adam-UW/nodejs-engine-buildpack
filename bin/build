#!/usr/bin/env bash
set -eo pipefail

layers_dir=$1
bp_dir=$(cd $(dirname $0)/..; pwd)

bootstrap_buildpack() {
  if [[ ! -f $bp_dir/bin/resolve-version ]]; then
    echo "---> Bootstrapping buildpack"
    bash "$bp_dir/bin/bootstrap" $bp_dir
  fi
}

install_or_reuse_parse_tools() {
  mkdir -p $layers_dir/bin

  if [[ ! -f $layers_dir/bin/jq ]]; then
    wget -qO $layers_dir/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 \
      && chmod +x $layers_dir/bin/jq
  fi

  if [[ ! -f $layers_dir/bin/yj ]]; then
    wget -qO $layers_dir/bin/yj https://github.com/sclevine/yj/releases/download/v2.0/yj-linux \
      && chmod +x $layers_dir/bin/yj
  fi

  echo "cache = true" > $layers_dir/bin.toml
  echo "build = false" >> $layers_dir/bin.toml
  echo "launch = false" >> $layers_dir/bin.toml
}

install_or_reuse_node() {
  local node_version=$(cat package.json | jq -r .engines.node)

  if [[ $node_version == null ]]; then
    echo "Please set a Node version in your package.json"
    exit 1
  fi

  local resolved_data=$(resolve-version node $node_version)
  local node_url=$(echo $resolved_data | cut -f2 -d " ")
  node_version=$(echo $resolved_data | cut -f1 -d " ")

  if [[ $node_version == $([[ -f $layers_dir/nodejs.toml ]] && cat $layers_dir/nodejs.toml | yj -t | jq -r .metadata.version) ]]; then
    echo "---> Reusing Node v$node_version"
  else
    echo "---> Downloading and extracting Node v$node_version"

    mkdir -p $layers_dir/nodejs
    rm -rf $layers_dir/nodejs/*

    echo "cache = true" > $layers_dir/nodejs.toml
    echo "build = true" >> $layers_dir/nodejs.toml
    echo "launch = true" >> $layers_dir/nodejs.toml
    echo -e "[metadata]\nversion = \"$node_version\"" >> $layers_dir/nodejs.toml

    wget -qO - $node_url | tar xzf - -C $layers_dir/nodejs
    mv $layers_dir/nodejs/*/* $layers_dir/nodejs
  fi
}

install_or_reuse_yarn() {
  local yarn_version=$(cat package.json | jq -r .engines.yarn)

  if [[ $yarn_version == null ]]; then yarn_version="latest"; fi

  local yarn_url=$(rv yarn $yarn_version)

  if $use_yarn; then
    if [[ $yarn_url == $([[ -f $layers_dir/yarn.toml ]] && cat $layers_dir/yarn.toml | yj -t | jq -r .metadata.url) ]]; then
      echo "---> Reusing yarn@$yarn_version"
    else
      echo "---> Installing yarn@$yarn_version"

      mkdir -p $layers_dir/yarn
      rm -rf $layers_dir/yarn/*

      echo "cache = true" > $layers_dir/yarn.toml
      echo "build = true" >> $layers_dir/yarn.toml
      echo "launch = true" >> $layers_dir/yarn.toml
      echo -e "[metadata]\nurl = \"$yarn_url\"" >> $layers_dir/yarn.toml

      wget -qO - $yarn_url | tar xzf - -C $layers_dir/yarn
      mv $layers_dir/yarn/*/* $layers_dir/yarn
    fi
  fi
}

[ -f ./yarn.lock ] && use_yarn=true || use_yarn=false

echo "---> Node.js Buildpack"

export PATH=$layers_dir/bin:$bp_dir/bin:$PATH
export PATH=$layers_dir/nodejs/bin:$layers_dir/yarn/bin:$PATH

rm -rf node_modules

bootstrap_buildpack
install_or_reuse_parse_tools
install_or_reuse_node
install_or_reuse_yarn
